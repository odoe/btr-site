{"version":3,"sources":["webpack://btr_site/ResizeObserver.ts","webpack://btr_site/./node_modules/resize-observer-polyfill/dist/ResizeObserver.js"],"names":["__webpack_require__","r","__webpack_exports__","_global__WEBPACK_IMPORTED_MODULE_0__","_has_has__WEBPACK_IMPORTED_MODULE_1__","resize_observer_polyfill__WEBPACK_IMPORTED_MODULE_2__","resize_observer_polyfill__WEBPACK_IMPORTED_MODULE_2___default","n","Object","ResizeObserver","a","global","factory","MapShim","Map","getIndex","arr","key","result","some","entry","index","anonymous","this","__entries__","prototypeAccessors","size","configurable","get","length","prototype","set","value","push","delete","entries","splice","has","clear","forEach","callback","ctx","i","list","call","defineProperties","isBrowser","window","document","global$1","Math","self","Function","requestAnimationFrame$1","requestAnimationFrame","bind","setTimeout","Date","now","trailingTimeout","transitionKeys","mutationObserverSupported","MutationObserver","ResizeObserverController","connected_","mutationEventsAdded_","mutationsObserver_","observers_","onTransitionEnd_","refresh","delay","leadingCall","trailingCall","lastCallTime","resolvePending","proxy","timeoutCallback","timeStamp","throttle","addObserver","observer","indexOf","connect_","removeObserver","observers","disconnect_","updateObservers_","activeObservers","filter","gatherActive","hasActive","broadcastActive","addEventListener","observe","attributes","childList","characterData","subtree","removeEventListener","disconnect","ref","propertyName","getInstance","instance_","defineConfigurable","target","props","keys","defineProperty","enumerable","writable","getWindowOf","ownerDocument","defaultView","emptyRect","createRectInit","toFloat","parseFloat","getBordersSize","styles","positions","len","arguments","reduce","position","getHTMLElementContentRect","clientWidth","clientHeight","getComputedStyle","paddings","getPaddings","horizPad","left","right","vertPad","top","bottom","width","height","boxSizing","round","documentElement","isDocumentElement","vertScrollbar","horizScrollbar","abs","isSVGGraphicsElement","SVGGraphicsElement","SVGElement","getBBox","getContentRect","bbox","getSVGContentRect","x","y","ResizeObservation","broadcastWidth","broadcastHeight","contentRect_","isActive","rect","broadcastRect","ResizeObserverEntry","rectInit","Constr","contentRect","DOMRectReadOnly","create","ResizeObserverSPI","controller","callbackCtx","activeObservations_","observations_","TypeError","callback_","controller_","callbackCtx_","Element","observations","unobserve","clearActive","this$1","observation","map","WeakMap","method","apply","module","exports"],"mappings":"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","file":"platform/ResizeObserver.93c1b9a75fe34276695b.bundle.js","sourcesContent":["import global from './global';\nimport has from '../has/has';\n`!has('build-elide')`;\nimport * as Resize from 'resize-observer-polyfill';\n\nexport interface DOMRectReadOnly {\n\treadonly x: number;\n\treadonly y: number;\n\treadonly width: number;\n\treadonly height: number;\n\treadonly top: number;\n\treadonly right: number;\n\treadonly bottom: number;\n\treadonly left: number;\n}\n\nexport interface ResizeObserverCallback {\n\t(entries: ResizeObserverEntry[], observer: ResizeObserver): void;\n}\n\nexport interface ResizeObserverEntry {\n\treadonly target: Element;\n\treadonly contentRect: DOMRectReadOnly;\n}\n\nexport interface ResizeObserver {\n\tprototype: ResizeObserver;\n\tnew (callback: ResizeObserverCallback): ResizeObserver;\n\tobserve(target: Element): void;\n\tunobserve(target: Element): void;\n\tdisconnect(): void;\n}\n\nif (!has('build-elide')) {\n\tif (!global.ResizeObserver) {\n\t\t// default is undefined when UMD module is used\n\t\tglobal.ResizeObserver = Resize.default || Resize;\n\t}\n}\n\nexport default global.ResizeObserver as ResizeObserver;\n","(function (global, factory) {\r\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\r\n\ttypeof define === 'function' && define.amd ? define(factory) :\r\n\t(global.ResizeObserver = factory());\r\n}(this, (function () { 'use strict';\r\n\r\n/**\r\n * A collection of shims that provide minimal functionality of the ES6 collections.\r\n *\r\n * These implementations are not meant to be used outside of the ResizeObserver\r\n * modules as they cover only a limited range of use cases.\r\n */\r\n/* eslint-disable require-jsdoc, valid-jsdoc */\r\nvar MapShim = (function () {\r\n    if (typeof Map !== 'undefined') {\r\n        return Map;\r\n    }\r\n\r\n    /**\r\n     * Returns index in provided array that matches the specified key.\r\n     *\r\n     * @param {Array<Array>} arr\r\n     * @param {*} key\r\n     * @returns {number}\r\n     */\r\n    function getIndex(arr, key) {\r\n        var result = -1;\r\n\r\n        arr.some(function (entry, index) {\r\n            if (entry[0] === key) {\r\n                result = index;\r\n\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    return (function () {\r\n        function anonymous() {\r\n            this.__entries__ = [];\r\n        }\r\n\r\n        var prototypeAccessors = { size: { configurable: true } };\r\n\r\n        /**\r\n         * @returns {boolean}\r\n         */\r\n        prototypeAccessors.size.get = function () {\r\n            return this.__entries__.length;\r\n        };\r\n\r\n        /**\r\n         * @param {*} key\r\n         * @returns {*}\r\n         */\r\n        anonymous.prototype.get = function (key) {\r\n            var index = getIndex(this.__entries__, key);\r\n            var entry = this.__entries__[index];\r\n\r\n            return entry && entry[1];\r\n        };\r\n\r\n        /**\r\n         * @param {*} key\r\n         * @param {*} value\r\n         * @returns {void}\r\n         */\r\n        anonymous.prototype.set = function (key, value) {\r\n            var index = getIndex(this.__entries__, key);\r\n\r\n            if (~index) {\r\n                this.__entries__[index][1] = value;\r\n            } else {\r\n                this.__entries__.push([key, value]);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * @param {*} key\r\n         * @returns {void}\r\n         */\r\n        anonymous.prototype.delete = function (key) {\r\n            var entries = this.__entries__;\r\n            var index = getIndex(entries, key);\r\n\r\n            if (~index) {\r\n                entries.splice(index, 1);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * @param {*} key\r\n         * @returns {void}\r\n         */\r\n        anonymous.prototype.has = function (key) {\r\n            return !!~getIndex(this.__entries__, key);\r\n        };\r\n\r\n        /**\r\n         * @returns {void}\r\n         */\r\n        anonymous.prototype.clear = function () {\r\n            this.__entries__.splice(0);\r\n        };\r\n\r\n        /**\r\n         * @param {Function} callback\r\n         * @param {*} [ctx=null]\r\n         * @returns {void}\r\n         */\r\n        anonymous.prototype.forEach = function (callback, ctx) {\r\n            var this$1 = this;\r\n            if ( ctx === void 0 ) ctx = null;\r\n\r\n            for (var i = 0, list = this$1.__entries__; i < list.length; i += 1) {\r\n                var entry = list[i];\r\n\r\n                callback.call(ctx, entry[1], entry[0]);\r\n            }\r\n        };\r\n\r\n        Object.defineProperties( anonymous.prototype, prototypeAccessors );\r\n\r\n        return anonymous;\r\n    }());\r\n})();\r\n\r\n/**\r\n * Detects whether window and document objects are available in current environment.\r\n */\r\nvar isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document;\r\n\r\n// Returns global object of a current environment.\r\nvar global$1 = (function () {\r\n    if (typeof global !== 'undefined' && global.Math === Math) {\r\n        return global;\r\n    }\r\n\r\n    if (typeof self !== 'undefined' && self.Math === Math) {\r\n        return self;\r\n    }\r\n\r\n    if (typeof window !== 'undefined' && window.Math === Math) {\r\n        return window;\r\n    }\r\n\r\n    // eslint-disable-next-line no-new-func\r\n    return Function('return this')();\r\n})();\r\n\r\n/**\r\n * A shim for the requestAnimationFrame which falls back to the setTimeout if\r\n * first one is not supported.\r\n *\r\n * @returns {number} Requests' identifier.\r\n */\r\nvar requestAnimationFrame$1 = (function () {\r\n    if (typeof requestAnimationFrame === 'function') {\r\n        // It's required to use a bounded function because IE sometimes throws\r\n        // an \"Invalid calling object\" error if rAF is invoked without the global\r\n        // object on the left hand side.\r\n        return requestAnimationFrame.bind(global$1);\r\n    }\r\n\r\n    return function (callback) { return setTimeout(function () { return callback(Date.now()); }, 1000 / 60); };\r\n})();\r\n\r\n// Defines minimum timeout before adding a trailing call.\r\nvar trailingTimeout = 2;\r\n\r\n/**\r\n * Creates a wrapper function which ensures that provided callback will be\r\n * invoked only once during the specified delay period.\r\n *\r\n * @param {Function} callback - Function to be invoked after the delay period.\r\n * @param {number} delay - Delay after which to invoke callback.\r\n * @returns {Function}\r\n */\r\nvar throttle = function (callback, delay) {\r\n    var leadingCall = false,\r\n        trailingCall = false,\r\n        lastCallTime = 0;\r\n\r\n    /**\r\n     * Invokes the original callback function and schedules new invocation if\r\n     * the \"proxy\" was called during current request.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    function resolvePending() {\r\n        if (leadingCall) {\r\n            leadingCall = false;\r\n\r\n            callback();\r\n        }\r\n\r\n        if (trailingCall) {\r\n            proxy();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback invoked after the specified delay. It will further postpone\r\n     * invocation of the original function delegating it to the\r\n     * requestAnimationFrame.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    function timeoutCallback() {\r\n        requestAnimationFrame$1(resolvePending);\r\n    }\r\n\r\n    /**\r\n     * Schedules invocation of the original function.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    function proxy() {\r\n        var timeStamp = Date.now();\r\n\r\n        if (leadingCall) {\r\n            // Reject immediately following calls.\r\n            if (timeStamp - lastCallTime < trailingTimeout) {\r\n                return;\r\n            }\r\n\r\n            // Schedule new call to be in invoked when the pending one is resolved.\r\n            // This is important for \"transitions\" which never actually start\r\n            // immediately so there is a chance that we might miss one if change\r\n            // happens amids the pending invocation.\r\n            trailingCall = true;\r\n        } else {\r\n            leadingCall = true;\r\n            trailingCall = false;\r\n\r\n            setTimeout(timeoutCallback, delay);\r\n        }\r\n\r\n        lastCallTime = timeStamp;\r\n    }\r\n\r\n    return proxy;\r\n};\r\n\r\n// Minimum delay before invoking the update of observers.\r\nvar REFRESH_DELAY = 20;\r\n\r\n// A list of substrings of CSS properties used to find transition events that\r\n// might affect dimensions of observed elements.\r\nvar transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight'];\r\n\r\n// Check if MutationObserver is available.\r\nvar mutationObserverSupported = typeof MutationObserver !== 'undefined';\r\n\r\n/**\r\n * Singleton controller class which handles updates of ResizeObserver instances.\r\n */\r\nvar ResizeObserverController = function() {\r\n    this.connected_ = false;\r\n    this.mutationEventsAdded_ = false;\r\n    this.mutationsObserver_ = null;\r\n    this.observers_ = [];\r\n\r\n    this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);\r\n    this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);\r\n};\r\n\r\n/**\r\n * Adds observer to observers list.\r\n *\r\n * @param {ResizeObserverSPI} observer - Observer to be added.\r\n * @returns {void}\r\n */\r\n\r\n\r\n/**\r\n * Holds reference to the controller's instance.\r\n *\r\n * @private {ResizeObserverController}\r\n */\r\n\r\n\r\n/**\r\n * Keeps reference to the instance of MutationObserver.\r\n *\r\n * @private {MutationObserver}\r\n */\r\n\r\n/**\r\n * Indicates whether DOM listeners have been added.\r\n *\r\n * @private {boolean}\r\n */\r\nResizeObserverController.prototype.addObserver = function (observer) {\r\n    if (!~this.observers_.indexOf(observer)) {\r\n        this.observers_.push(observer);\r\n    }\r\n\r\n    // Add listeners if they haven't been added yet.\r\n    if (!this.connected_) {\r\n        this.connect_();\r\n    }\r\n};\r\n\r\n/**\r\n * Removes observer from observers list.\r\n *\r\n * @param {ResizeObserverSPI} observer - Observer to be removed.\r\n * @returns {void}\r\n */\r\nResizeObserverController.prototype.removeObserver = function (observer) {\r\n    var observers = this.observers_;\r\n    var index = observers.indexOf(observer);\r\n\r\n    // Remove observer if it's present in registry.\r\n    if (~index) {\r\n        observers.splice(index, 1);\r\n    }\r\n\r\n    // Remove listeners if controller has no connected observers.\r\n    if (!observers.length && this.connected_) {\r\n        this.disconnect_();\r\n    }\r\n};\r\n\r\n/**\r\n * Invokes the update of observers. It will continue running updates insofar\r\n * it detects changes.\r\n *\r\n * @returns {void}\r\n */\r\nResizeObserverController.prototype.refresh = function () {\r\n    var changesDetected = this.updateObservers_();\r\n\r\n    // Continue running updates if changes have been detected as there might\r\n    // be future ones caused by CSS transitions.\r\n    if (changesDetected) {\r\n        this.refresh();\r\n    }\r\n};\r\n\r\n/**\r\n * Updates every observer from observers list and notifies them of queued\r\n * entries.\r\n *\r\n * @private\r\n * @returns {boolean} Returns \"true\" if any observer has detected changes in\r\n *  dimensions of it's elements.\r\n */\r\nResizeObserverController.prototype.updateObservers_ = function () {\r\n    // Collect observers that have active observations.\r\n    var activeObservers = this.observers_.filter(function (observer) {\r\n        return observer.gatherActive(), observer.hasActive();\r\n    });\r\n\r\n    // Deliver notifications in a separate cycle in order to avoid any\r\n    // collisions between observers, e.g. when multiple instances of\r\n    // ResizeObserver are tracking the same element and the callback of one\r\n    // of them changes content dimensions of the observed target. Sometimes\r\n    // this may result in notifications being blocked for the rest of observers.\r\n    activeObservers.forEach(function (observer) { return observer.broadcastActive(); });\r\n\r\n    return activeObservers.length > 0;\r\n};\r\n\r\n/**\r\n * Initializes DOM listeners.\r\n *\r\n * @private\r\n * @returns {void}\r\n */\r\nResizeObserverController.prototype.connect_ = function () {\r\n    // Do nothing if running in a non-browser environment or if listeners\r\n    // have been already added.\r\n    if (!isBrowser || this.connected_) {\r\n        return;\r\n    }\r\n\r\n    // Subscription to the \"Transitionend\" event is used as a workaround for\r\n    // delayed transitions. This way it's possible to capture at least the\r\n    // final state of an element.\r\n    document.addEventListener('transitionend', this.onTransitionEnd_);\r\n\r\n    window.addEventListener('resize', this.refresh);\r\n\r\n    if (mutationObserverSupported) {\r\n        this.mutationsObserver_ = new MutationObserver(this.refresh);\r\n\r\n        this.mutationsObserver_.observe(document, {\r\n            attributes: true,\r\n            childList: true,\r\n            characterData: true,\r\n            subtree: true\r\n        });\r\n    } else {\r\n        document.addEventListener('DOMSubtreeModified', this.refresh);\r\n\r\n        this.mutationEventsAdded_ = true;\r\n    }\r\n\r\n    this.connected_ = true;\r\n};\r\n\r\n/**\r\n * Removes DOM listeners.\r\n *\r\n * @private\r\n * @returns {void}\r\n */\r\nResizeObserverController.prototype.disconnect_ = function () {\r\n    // Do nothing if running in a non-browser environment or if listeners\r\n    // have been already removed.\r\n    if (!isBrowser || !this.connected_) {\r\n        return;\r\n    }\r\n\r\n    document.removeEventListener('transitionend', this.onTransitionEnd_);\r\n    window.removeEventListener('resize', this.refresh);\r\n\r\n    if (this.mutationsObserver_) {\r\n        this.mutationsObserver_.disconnect();\r\n    }\r\n\r\n    if (this.mutationEventsAdded_) {\r\n        document.removeEventListener('DOMSubtreeModified', this.refresh);\r\n    }\r\n\r\n    this.mutationsObserver_ = null;\r\n    this.mutationEventsAdded_ = false;\r\n    this.connected_ = false;\r\n};\r\n\r\n/**\r\n * \"Transitionend\" event handler.\r\n *\r\n * @private\r\n * @param {TransitionEvent} event\r\n * @returns {void}\r\n */\r\nResizeObserverController.prototype.onTransitionEnd_ = function (ref) {\r\n        var propertyName = ref.propertyName; if ( propertyName === void 0 ) propertyName = '';\r\n\r\n    // Detect whether transition may affect dimensions of an element.\r\n    var isReflowProperty = transitionKeys.some(function (key) {\r\n        return !!~propertyName.indexOf(key);\r\n    });\r\n\r\n    if (isReflowProperty) {\r\n        this.refresh();\r\n    }\r\n};\r\n\r\n/**\r\n * Returns instance of the ResizeObserverController.\r\n *\r\n * @returns {ResizeObserverController}\r\n */\r\nResizeObserverController.getInstance = function () {\r\n    if (!this.instance_) {\r\n        this.instance_ = new ResizeObserverController();\r\n    }\r\n\r\n    return this.instance_;\r\n};\r\n\r\nResizeObserverController.instance_ = null;\r\n\r\n/**\r\n * Defines non-writable/enumerable properties of the provided target object.\r\n *\r\n * @param {Object} target - Object for which to define properties.\r\n * @param {Object} props - Properties to be defined.\r\n * @returns {Object} Target object.\r\n */\r\nvar defineConfigurable = (function (target, props) {\r\n    for (var i = 0, list = Object.keys(props); i < list.length; i += 1) {\r\n        var key = list[i];\r\n\r\n        Object.defineProperty(target, key, {\r\n            value: props[key],\r\n            enumerable: false,\r\n            writable: false,\r\n            configurable: true\r\n        });\r\n    }\r\n\r\n    return target;\r\n});\r\n\r\n/**\r\n * Returns the global object associated with provided element.\r\n *\r\n * @param {Object} target\r\n * @returns {Object}\r\n */\r\nvar getWindowOf = (function (target) {\r\n    // Assume that the element is an instance of Node, which means that it\r\n    // has the \"ownerDocument\" property from which we can retrieve a\r\n    // corresponding global object.\r\n    var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;\r\n\r\n    // Return the local global object if it's not possible extract one from\r\n    // provided element.\r\n    return ownerGlobal || global$1;\r\n});\r\n\r\n// Placeholder of an empty content rectangle.\r\nvar emptyRect = createRectInit(0, 0, 0, 0);\r\n\r\n/**\r\n * Converts provided string to a number.\r\n *\r\n * @param {number|string} value\r\n * @returns {number}\r\n */\r\nfunction toFloat(value) {\r\n    return parseFloat(value) || 0;\r\n}\r\n\r\n/**\r\n * Extracts borders size from provided styles.\r\n *\r\n * @param {CSSStyleDeclaration} styles\r\n * @param {...string} positions - Borders positions (top, right, ...)\r\n * @returns {number}\r\n */\r\nfunction getBordersSize(styles) {\r\n    var positions = [], len = arguments.length - 1;\r\n    while ( len-- > 0 ) positions[ len ] = arguments[ len + 1 ];\r\n\r\n    return positions.reduce(function (size, position) {\r\n        var value = styles['border-' + position + '-width'];\r\n\r\n        return size + toFloat(value);\r\n    }, 0);\r\n}\r\n\r\n/**\r\n * Extracts paddings sizes from provided styles.\r\n *\r\n * @param {CSSStyleDeclaration} styles\r\n * @returns {Object} Paddings box.\r\n */\r\nfunction getPaddings(styles) {\r\n    var positions = ['top', 'right', 'bottom', 'left'];\r\n    var paddings = {};\r\n\r\n    for (var i = 0, list = positions; i < list.length; i += 1) {\r\n        var position = list[i];\r\n\r\n        var value = styles['padding-' + position];\r\n\r\n        paddings[position] = toFloat(value);\r\n    }\r\n\r\n    return paddings;\r\n}\r\n\r\n/**\r\n * Calculates content rectangle of provided SVG element.\r\n *\r\n * @param {SVGGraphicsElement} target - Element content rectangle of which needs\r\n *      to be calculated.\r\n * @returns {DOMRectInit}\r\n */\r\nfunction getSVGContentRect(target) {\r\n    var bbox = target.getBBox();\r\n\r\n    return createRectInit(0, 0, bbox.width, bbox.height);\r\n}\r\n\r\n/**\r\n * Calculates content rectangle of provided HTMLElement.\r\n *\r\n * @param {HTMLElement} target - Element for which to calculate the content rectangle.\r\n * @returns {DOMRectInit}\r\n */\r\nfunction getHTMLElementContentRect(target) {\r\n    // Client width & height properties can't be\r\n    // used exclusively as they provide rounded values.\r\n    var clientWidth = target.clientWidth;\r\n    var clientHeight = target.clientHeight;\r\n\r\n    // By this condition we can catch all non-replaced inline, hidden and\r\n    // detached elements. Though elements with width & height properties less\r\n    // than 0.5 will be discarded as well.\r\n    //\r\n    // Without it we would need to implement separate methods for each of\r\n    // those cases and it's not possible to perform a precise and performance\r\n    // effective test for hidden elements. E.g. even jQuery's ':visible' filter\r\n    // gives wrong results for elements with width & height less than 0.5.\r\n    if (!clientWidth && !clientHeight) {\r\n        return emptyRect;\r\n    }\r\n\r\n    var styles = getWindowOf(target).getComputedStyle(target);\r\n    var paddings = getPaddings(styles);\r\n    var horizPad = paddings.left + paddings.right;\r\n    var vertPad = paddings.top + paddings.bottom;\r\n\r\n    // Computed styles of width & height are being used because they are the\r\n    // only dimensions available to JS that contain non-rounded values. It could\r\n    // be possible to utilize the getBoundingClientRect if only it's data wasn't\r\n    // affected by CSS transformations let alone paddings, borders and scroll bars.\r\n    var width = toFloat(styles.width),\r\n        height = toFloat(styles.height);\r\n\r\n    // Width & height include paddings and borders when the 'border-box' box\r\n    // model is applied (except for IE).\r\n    if (styles.boxSizing === 'border-box') {\r\n        // Following conditions are required to handle Internet Explorer which\r\n        // doesn't include paddings and borders to computed CSS dimensions.\r\n        //\r\n        // We can say that if CSS dimensions + paddings are equal to the \"client\"\r\n        // properties then it's either IE, and thus we don't need to subtract\r\n        // anything, or an element merely doesn't have paddings/borders styles.\r\n        if (Math.round(width + horizPad) !== clientWidth) {\r\n            width -= getBordersSize(styles, 'left', 'right') + horizPad;\r\n        }\r\n\r\n        if (Math.round(height + vertPad) !== clientHeight) {\r\n            height -= getBordersSize(styles, 'top', 'bottom') + vertPad;\r\n        }\r\n    }\r\n\r\n    // Following steps can't be applied to the document's root element as its\r\n    // client[Width/Height] properties represent viewport area of the window.\r\n    // Besides, it's as well not necessary as the <html> itself neither has\r\n    // rendered scroll bars nor it can be clipped.\r\n    if (!isDocumentElement(target)) {\r\n        // In some browsers (only in Firefox, actually) CSS width & height\r\n        // include scroll bars size which can be removed at this step as scroll\r\n        // bars are the only difference between rounded dimensions + paddings\r\n        // and \"client\" properties, though that is not always true in Chrome.\r\n        var vertScrollbar = Math.round(width + horizPad) - clientWidth;\r\n        var horizScrollbar = Math.round(height + vertPad) - clientHeight;\r\n\r\n        // Chrome has a rather weird rounding of \"client\" properties.\r\n        // E.g. for an element with content width of 314.2px it sometimes gives\r\n        // the client width of 315px and for the width of 314.7px it may give\r\n        // 314px. And it doesn't happen all the time. So just ignore this delta\r\n        // as a non-relevant.\r\n        if (Math.abs(vertScrollbar) !== 1) {\r\n            width -= vertScrollbar;\r\n        }\r\n\r\n        if (Math.abs(horizScrollbar) !== 1) {\r\n            height -= horizScrollbar;\r\n        }\r\n    }\r\n\r\n    return createRectInit(paddings.left, paddings.top, width, height);\r\n}\r\n\r\n/**\r\n * Checks whether provided element is an instance of the SVGGraphicsElement.\r\n *\r\n * @param {Element} target - Element to be checked.\r\n * @returns {boolean}\r\n */\r\nvar isSVGGraphicsElement = (function () {\r\n    // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement\r\n    // interface.\r\n    if (typeof SVGGraphicsElement !== 'undefined') {\r\n        return function (target) { return target instanceof getWindowOf(target).SVGGraphicsElement; };\r\n    }\r\n\r\n    // If it's so, then check that element is at least an instance of the\r\n    // SVGElement and that it has the \"getBBox\" method.\r\n    // eslint-disable-next-line no-extra-parens\r\n    return function (target) { return target instanceof getWindowOf(target).SVGElement && typeof target.getBBox === 'function'; };\r\n})();\r\n\r\n/**\r\n * Checks whether provided element is a document element (<html>).\r\n *\r\n * @param {Element} target - Element to be checked.\r\n * @returns {boolean}\r\n */\r\nfunction isDocumentElement(target) {\r\n    return target === getWindowOf(target).document.documentElement;\r\n}\r\n\r\n/**\r\n * Calculates an appropriate content rectangle for provided html or svg element.\r\n *\r\n * @param {Element} target - Element content rectangle of which needs to be calculated.\r\n * @returns {DOMRectInit}\r\n */\r\nfunction getContentRect(target) {\r\n    if (!isBrowser) {\r\n        return emptyRect;\r\n    }\r\n\r\n    if (isSVGGraphicsElement(target)) {\r\n        return getSVGContentRect(target);\r\n    }\r\n\r\n    return getHTMLElementContentRect(target);\r\n}\r\n\r\n/**\r\n * Creates rectangle with an interface of the DOMRectReadOnly.\r\n * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly\r\n *\r\n * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.\r\n * @returns {DOMRectReadOnly}\r\n */\r\nfunction createReadOnlyRect(ref) {\r\n    var x = ref.x;\r\n    var y = ref.y;\r\n    var width = ref.width;\r\n    var height = ref.height;\r\n\r\n    // If DOMRectReadOnly is available use it as a prototype for the rectangle.\r\n    var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;\r\n    var rect = Object.create(Constr.prototype);\r\n\r\n    // Rectangle's properties are not writable and non-enumerable.\r\n    defineConfigurable(rect, {\r\n        x: x, y: y, width: width, height: height,\r\n        top: y,\r\n        right: x + width,\r\n        bottom: height + y,\r\n        left: x\r\n    });\r\n\r\n    return rect;\r\n}\r\n\r\n/**\r\n * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.\r\n * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit\r\n *\r\n * @param {number} x - X coordinate.\r\n * @param {number} y - Y coordinate.\r\n * @param {number} width - Rectangle's width.\r\n * @param {number} height - Rectangle's height.\r\n * @returns {DOMRectInit}\r\n */\r\nfunction createRectInit(x, y, width, height) {\r\n    return { x: x, y: y, width: width, height: height };\r\n}\r\n\r\n/**\r\n * Class that is responsible for computations of the content rectangle of\r\n * provided DOM element and for keeping track of it's changes.\r\n */\r\nvar ResizeObservation = function(target) {\r\n    this.broadcastWidth = 0;\r\n    this.broadcastHeight = 0;\r\n    this.contentRect_ = createRectInit(0, 0, 0, 0);\r\n\r\n    this.target = target;\r\n};\r\n\r\n/**\r\n * Updates content rectangle and tells whether it's width or height properties\r\n * have changed since the last broadcast.\r\n *\r\n * @returns {boolean}\r\n */\r\n\r\n\r\n/**\r\n * Reference to the last observed content rectangle.\r\n *\r\n * @private {DOMRectInit}\r\n */\r\n\r\n\r\n/**\r\n * Broadcasted width of content rectangle.\r\n *\r\n * @type {number}\r\n */\r\nResizeObservation.prototype.isActive = function () {\r\n    var rect = getContentRect(this.target);\r\n\r\n    this.contentRect_ = rect;\r\n\r\n    return rect.width !== this.broadcastWidth || rect.height !== this.broadcastHeight;\r\n};\r\n\r\n/**\r\n * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data\r\n * from the corresponding properties of the last observed content rectangle.\r\n *\r\n * @returns {DOMRectInit} Last observed content rectangle.\r\n */\r\nResizeObservation.prototype.broadcastRect = function () {\r\n    var rect = this.contentRect_;\r\n\r\n    this.broadcastWidth = rect.width;\r\n    this.broadcastHeight = rect.height;\r\n\r\n    return rect;\r\n};\r\n\r\nvar ResizeObserverEntry = function(target, rectInit) {\r\n    var contentRect = createReadOnlyRect(rectInit);\r\n\r\n    // According to the specification following properties are not writable\r\n    // and are also not enumerable in the native implementation.\r\n    //\r\n    // Property accessors are not being used as they'd require to define a\r\n    // private WeakMap storage which may cause memory leaks in browsers that\r\n    // don't support this type of collections.\r\n    defineConfigurable(this, { target: target, contentRect: contentRect });\r\n};\r\n\r\nvar ResizeObserverSPI = function(callback, controller, callbackCtx) {\r\n    this.activeObservations_ = [];\r\n    this.observations_ = new MapShim();\r\n\r\n    if (typeof callback !== 'function') {\r\n        throw new TypeError('The callback provided as parameter 1 is not a function.');\r\n    }\r\n\r\n    this.callback_ = callback;\r\n    this.controller_ = controller;\r\n    this.callbackCtx_ = callbackCtx;\r\n};\r\n\r\n/**\r\n * Starts observing provided element.\r\n *\r\n * @param {Element} target - Element to be observed.\r\n * @returns {void}\r\n */\r\n\r\n\r\n/**\r\n * Registry of the ResizeObservation instances.\r\n *\r\n * @private {Map<Element, ResizeObservation>}\r\n */\r\n\r\n\r\n/**\r\n * Public ResizeObserver instance which will be passed to the callback\r\n * function and used as a value of it's \"this\" binding.\r\n *\r\n * @private {ResizeObserver}\r\n */\r\n\r\n/**\r\n * Collection of resize observations that have detected changes in dimensions\r\n * of elements.\r\n *\r\n * @private {Array<ResizeObservation>}\r\n */\r\nResizeObserverSPI.prototype.observe = function (target) {\r\n    if (!arguments.length) {\r\n        throw new TypeError('1 argument required, but only 0 present.');\r\n    }\r\n\r\n    // Do nothing if current environment doesn't have the Element interface.\r\n    if (typeof Element === 'undefined' || !(Element instanceof Object)) {\r\n        return;\r\n    }\r\n\r\n    if (!(target instanceof getWindowOf(target).Element)) {\r\n        throw new TypeError('parameter 1 is not of type \"Element\".');\r\n    }\r\n\r\n    var observations = this.observations_;\r\n\r\n    // Do nothing if element is already being observed.\r\n    if (observations.has(target)) {\r\n        return;\r\n    }\r\n\r\n    observations.set(target, new ResizeObservation(target));\r\n\r\n    this.controller_.addObserver(this);\r\n\r\n    // Force the update of observations.\r\n    this.controller_.refresh();\r\n};\r\n\r\n/**\r\n * Stops observing provided element.\r\n *\r\n * @param {Element} target - Element to stop observing.\r\n * @returns {void}\r\n */\r\nResizeObserverSPI.prototype.unobserve = function (target) {\r\n    if (!arguments.length) {\r\n        throw new TypeError('1 argument required, but only 0 present.');\r\n    }\r\n\r\n    // Do nothing if current environment doesn't have the Element interface.\r\n    if (typeof Element === 'undefined' || !(Element instanceof Object)) {\r\n        return;\r\n    }\r\n\r\n    if (!(target instanceof getWindowOf(target).Element)) {\r\n        throw new TypeError('parameter 1 is not of type \"Element\".');\r\n    }\r\n\r\n    var observations = this.observations_;\r\n\r\n    // Do nothing if element is not being observed.\r\n    if (!observations.has(target)) {\r\n        return;\r\n    }\r\n\r\n    observations.delete(target);\r\n\r\n    if (!observations.size) {\r\n        this.controller_.removeObserver(this);\r\n    }\r\n};\r\n\r\n/**\r\n * Stops observing all elements.\r\n *\r\n * @returns {void}\r\n */\r\nResizeObserverSPI.prototype.disconnect = function () {\r\n    this.clearActive();\r\n    this.observations_.clear();\r\n    this.controller_.removeObserver(this);\r\n};\r\n\r\n/**\r\n * Collects observation instances the associated element of which has changed\r\n * it's content rectangle.\r\n *\r\n * @returns {void}\r\n */\r\nResizeObserverSPI.prototype.gatherActive = function () {\r\n        var this$1 = this;\r\n\r\n    this.clearActive();\r\n\r\n    this.observations_.forEach(function (observation) {\r\n        if (observation.isActive()) {\r\n            this$1.activeObservations_.push(observation);\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Invokes initial callback function with a list of ResizeObserverEntry\r\n * instances collected from active resize observations.\r\n *\r\n * @returns {void}\r\n */\r\nResizeObserverSPI.prototype.broadcastActive = function () {\r\n    // Do nothing if observer doesn't have active observations.\r\n    if (!this.hasActive()) {\r\n        return;\r\n    }\r\n\r\n    var ctx = this.callbackCtx_;\r\n\r\n    // Create ResizeObserverEntry instance for every active observation.\r\n    var entries = this.activeObservations_.map(function (observation) {\r\n        return new ResizeObserverEntry(observation.target, observation.broadcastRect());\r\n    });\r\n\r\n    this.callback_.call(ctx, entries, ctx);\r\n    this.clearActive();\r\n};\r\n\r\n/**\r\n * Clears the collection of active observations.\r\n *\r\n * @returns {void}\r\n */\r\nResizeObserverSPI.prototype.clearActive = function () {\r\n    this.activeObservations_.splice(0);\r\n};\r\n\r\n/**\r\n * Tells whether observer has active observations.\r\n *\r\n * @returns {boolean}\r\n */\r\nResizeObserverSPI.prototype.hasActive = function () {\r\n    return this.activeObservations_.length > 0;\r\n};\r\n\r\n// Registry of internal observers. If WeakMap is not available use current shim\r\n// for the Map collection as it has all required methods and because WeakMap\r\n// can't be fully polyfilled anyway.\r\nvar observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();\r\n\r\n/**\r\n * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation\r\n * exposing only those methods and properties that are defined in the spec.\r\n */\r\nvar ResizeObserver = function(callback) {\r\n    if (!(this instanceof ResizeObserver)) {\r\n        throw new TypeError('Cannot call a class as a function.');\r\n    }\r\n    if (!arguments.length) {\r\n        throw new TypeError('1 argument required, but only 0 present.');\r\n    }\r\n\r\n    var controller = ResizeObserverController.getInstance();\r\n    var observer = new ResizeObserverSPI(callback, controller, this);\r\n\r\n    observers.set(this, observer);\r\n};\r\n\r\n// Expose public methods of ResizeObserver.\r\n['observe', 'unobserve', 'disconnect'].forEach(function (method) {\r\n    ResizeObserver.prototype[method] = function () {\r\n        return (ref = observers.get(this))[method].apply(ref, arguments);\r\n        var ref;\r\n    };\r\n});\r\n\r\nvar index = (function () {\r\n    // Export existing implementation if available.\r\n    if (typeof global$1.ResizeObserver !== 'undefined') {\r\n        return global$1.ResizeObserver;\r\n    }\r\n\r\n    return ResizeObserver;\r\n})();\r\n\r\nreturn index;\r\n\r\n})));\r\n"],"sourceRoot":""}